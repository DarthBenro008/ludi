/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
  Forc version: 0.64.0
  Fuel-Core version: 0.36.0
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Enum, Result } from "./common";

export enum ErrorInput { VrfRequestFailed = 'VrfRequestFailed', RoundIsInProgres = 'RoundIsInProgres', InsufficientBalance = 'InsufficientBalance' };
export enum ErrorOutput { VrfRequestFailed = 'VrfRequestFailed', RoundIsInProgres = 'RoundIsInProgres', InsufficientBalance = 'InsufficientBalance' };

const abi = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "()",
      "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
    },
    {
      "type": "enum error::Error",
      "concreteTypeId": "98ba681212c5293b46b67c3ecb774e0a2e3d324008580c35fc533e1c1a762d7e",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::result::Result<(),enum error::Error>",
      "concreteTypeId": "47d526bb28c49cc34ef6e1af01ecff7688d9d66974ca3696d69ebcefc42419ef",
      "metadataTypeId": 1,
      "typeArguments": [
        "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
        "98ba681212c5293b46b67c3ecb774e0a2e3d324008580c35fc533e1c1a762d7e"
      ]
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "enum error::Error",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "VrfRequestFailed",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "RoundIsInProgres",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "InsufficientBalance",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum std::result::Result",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "Ok",
          "typeId": 3
        },
        {
          "name": "Err",
          "typeId": 2
        }
      ],
      "typeParameters": [
        3,
        2
      ]
    },
    {
      "type": "generic E",
      "metadataTypeId": 2
    },
    {
      "type": "generic T",
      "metadataTypeId": 3
    }
  ],
  "functions": [
    {
      "inputs": [],
      "name": "deposit",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "get_gamble_pool",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "get_stake_pool",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "amount",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "withdraw",
      "output": "47d526bb28c49cc34ef6e1af01ecff7688d9d66974ca3696d69ebcefc42419ef",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": []
};

const storageSlots: StorageSlot[] = [
  {
    "key": "23f7497702dabda305cf30725d0cd559c38dd0e17451bd6cb74841f7f691ca05",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  }
];

export class LudiContractInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    deposit: FunctionFragment;
    get_gamble_pool: FunctionFragment;
    get_stake_pool: FunctionFragment;
    withdraw: FunctionFragment;
  };
}

export class LudiContract extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: LudiContractInterface;
  declare functions: {
    deposit: InvokeFunction<[], void>;
    get_gamble_pool: InvokeFunction<[], BN>;
    get_stake_pool: InvokeFunction<[], BN>;
    withdraw: InvokeFunction<[amount: BigNumberish], Result<void, ErrorOutput>>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
